# @api_view(['POST'])
# def add_item(request):
#     try:
#         cart_code = request.data.get('cart_code')
#         product_id = request.data.get('product_id')
#         quantity = request.data.get('quantity', 1)  # Lấy quantity từ request, mặc định là 1

#         cart, created = Cart.objects.get_or_create(cart_code=cart_code)
#         product = Product.objects.get(id=product_id)

#         cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
#         # Cập nhật số lượng
#         if created:
#             cart_item.quantity = quantity  # Nếu là sản phẩm mới, đặt quantity
#         else:
#             cart_item.quantity += quantity  # Nếu đã tồn tại, tăng/giảm quantity
#         # Đảm bảo số lượng không nhỏ hơn 1
#         if cart_item.quantity < 1:
#             cart_item.delete()  # Xóa sản phẩm khỏi giỏ hàng nếu quantity < 1
#             return Response({
#                 "message": "Item removed from cart.",
#                 "status": status.HTTP_200_OK
#             })

#         cart_item.save()
#         serializer = CartItemSerializer(cart_item)
#         return Response({
#             "data": serializer.data,
#             "message": "Cart item updated successfully.",
#             "status": status.HTTP_200_OK
#         })
#     except Product.DoesNotExist:
#         return Response({
#             "message": "Product not found.",
#             "status": status.HTTP_404_NOT_FOUND
#         })
#     except Exception as e:
#         return Response({
#             "message": str(e),
#             "status": status.HTTP_400_BAD_REQUEST
#         })

# @api_view(['POST'])
# def add_item(request):
#     try:
#         cart_code = request.data.get('cart_code')
#         product_id = request.data.get('product_id')
#         quantity = request.data.get('quantity', 1)  # Lấy quantity từ request, mặc định là 1

#         cart, created = Cart.objects.get_or_create(cart_code=cart_code)
#         product = Product.objects.get(id=product_id)

#         cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product)
#         # Cập nhật số lượng
#         if created:
#             cart_item.quantity = quantity  # Nếu là sản phẩm mới, đặt quantity
#         else:
#             cart_item.quantity += quantity  # Nếu đã tồn tại, tăng/giảm quantity
#         # Đảm bảo số lượng không nhỏ hơn 1
#         if cart_item.quantity < 1:
#             cart_item.delete()  # Xóa sản phẩm khỏi giỏ hàng nếu quantity < 1
#             # Trả về toàn bộ cart sau khi xóa
#             cart_items = CartItem.objects.filter(cart=cart)
#             serializer = CartItemSerializer(cart_items, many=True)
#             return Response({
#                 "data": serializer.data,
#                 "message": "Item removed from cart.",
#                 "status": status.HTTP_200_OK
#             })

#         cart_item.save()
#         # Sau khi cập nhật, trả về toàn bộ cart_items
#         cart_items = CartItem.objects.filter(cart=cart)
#         serializer = CartItemSerializer(cart_items, many=True)
#         return Response({
#             "data": serializer.data,
#             "message": "Cart updated successfully.",
#             "status": status.HTTP_200_OK
#         })
#     except Product.DoesNotExist:
#         return Response({
#             "message": "Product not found.",
#             "status": status.HTTP_404_NOT_FOUND
#         })
#     except Exception as e:
#         return Response({
#             "message": str(e),
#             "status": status.HTTP_400_BAD_REQUEST
#         })